#Test "define" and "call"
define function define_function_ok
	print output value "call: ok"
enddefine
print output var define_function_ok
call function define_function_ok

# Test "concat"
concat var concat_ok from value "concat" and value ": ok"
print output var concat_ok

# Test "set key"
set key Test to value "set key: ok"
print output key Test

# Test "if [not] strequal" and "discard"
discard key Test
if strequal key Test to value ""
	print output value "if strequal: ok"
	print output value "discard: ok"
endif
if not strequal key Test to value 0
	print output value "if not strequal: ok"
endif

#Test "if" with numeric comparisons
if greater key Test than value -1.234
	print output value "if numequal: ok"
endif
if not less key Test than value "-4"
	print output value "if numequal: ok"
endif

# Test "eval"
eval var i from value 1 plus value 2 over value 6
if numequal var i to value .5
	print output value "eval: ok"
endif 


# Test "for each ... from ... to" and "concat ... and ... and ..."
discard var vec
discard var sum_1
for each var i from value 0 to value 3 step value 1
	concat var vec from var vec and var i and value ";"
	eval var sum_1 from var sum_1 plus var i
endfor
if numequal var sum_1 to value 6
	print output value "for each ... in: ok"
endif
# Test "for each ... in"
discard var sum_2
for each var i in var vec
	eval var sum_2 from var sum_2 plus var i
endfor
if numequal var sum_1 to var sum_2
	print output value "for each ... from ... to: ok"
endif

# Test "while" and encapsulated blocks
set var active to value true
set var i to value 3
while var active
	print output var i
	eval var i from var i minus value 1
	if lequal var i than value 0
		set var active to value false
	endif
endwhile
print output value "while: ok"

print output value "if you can see this message then most likely GetSet scripting is functional."


